// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExampleProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExampleProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace sqiwy {
namespace poker {

namespace {

const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Card_Suits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Card_Types_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandRespond_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatTakeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatTakeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatTakeRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatTakeRespond_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExampleProto_2eproto() {
  protobuf_AddDesc_ExampleProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExampleProto.proto");
  GOOGLE_CHECK(file != NULL);
  Card_descriptor_ = file->message_type(0);
  static const int Card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, type_),
  };
  Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Card));
  Card_Suits_descriptor_ = Card_descriptor_->enum_type(0);
  Card_Types_descriptor_ = Card_descriptor_->enum_type(1);
  HandRequest_descriptor_ = file->message_type(1);
  static const int HandRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandRequest, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandRequest, show_),
  };
  HandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandRequest_descriptor_,
      HandRequest::default_instance_,
      HandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandRequest));
  HandRespond_descriptor_ = file->message_type(2);
  static const int HandRespond_offsets_[1] = {
  };
  HandRespond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandRespond_descriptor_,
      HandRespond::default_instance_,
      HandRespond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandRespond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandRespond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandRespond));
  SeatTakeRequest_descriptor_ = file->message_type(3);
  static const int SeatTakeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTakeRequest, take_),
  };
  SeatTakeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeatTakeRequest_descriptor_,
      SeatTakeRequest::default_instance_,
      SeatTakeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTakeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTakeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeatTakeRequest));
  SeatTakeRespond_descriptor_ = file->message_type(4);
  static const int SeatTakeRespond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTakeRespond, taken_),
  };
  SeatTakeRespond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeatTakeRespond_descriptor_,
      SeatTakeRespond::default_instance_,
      SeatTakeRespond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTakeRespond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTakeRespond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeatTakeRespond));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExampleProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandRequest_descriptor_, &HandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandRespond_descriptor_, &HandRespond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeatTakeRequest_descriptor_, &SeatTakeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeatTakeRespond_descriptor_, &SeatTakeRespond::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExampleProto_2eproto() {
  delete Card::default_instance_;
  delete Card_reflection_;
  delete HandRequest::default_instance_;
  delete HandRequest_reflection_;
  delete HandRespond::default_instance_;
  delete HandRespond_reflection_;
  delete SeatTakeRequest::default_instance_;
  delete SeatTakeRequest_reflection_;
  delete SeatTakeRespond::default_instance_;
  delete SeatTakeRespond_reflection_;
}

void protobuf_AddDesc_ExampleProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ExampleProto.proto\022\017com.sqiwy.poker\"\254\002"
    "\n\004Card\022)\n\004suit\030\001 \002(\0162\033.com.sqiwy.poker.C"
    "ard.Suits\022)\n\004type\030\002 \002(\0162\033.com.sqiwy.poke"
    "r.Card.Types\"8\n\005Suits\022\t\n\005CLUBS\020\000\022\014\n\010DIAM"
    "ONDS\020\001\022\n\n\006HEARTS\020\002\022\n\n\006SPADES\020\003\"\223\001\n\005Types"
    "\022\t\n\005CARD2\020\002\022\t\n\005CARD3\020\003\022\t\n\005CARD4\020\004\022\t\n\005CAR"
    "D5\020\005\022\t\n\005CARD6\020\006\022\t\n\005CARD7\020\007\022\t\n\005CARD8\020\010\022\t\n"
    "\005CARD9\020\t\022\n\n\006CARD10\020\n\022\010\n\004JACK\020\013\022\t\n\005QUEEN\020"
    "\014\022\010\n\004KING\020\r\022\007\n\003ACE\020\016\"A\n\013HandRequest\022$\n\005c"
    "ards\030\001 \003(\0132\025.com.sqiwy.poker.Card\022\014\n\004sho"
    "w\030\002 \002(\010\"\r\n\013HandRespond\"\037\n\017SeatTakeReques"
    "t\022\014\n\004take\030\001 \002(\010\" \n\017SeatTakeRespond\022\r\n\005ta"
    "ken\030\001 \002(\010B\021\n\017com.sqiwy.poker", 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExampleProto.proto", &protobuf_RegisterTypes);
  Card::default_instance_ = new Card();
  HandRequest::default_instance_ = new HandRequest();
  HandRespond::default_instance_ = new HandRespond();
  SeatTakeRequest::default_instance_ = new SeatTakeRequest();
  SeatTakeRespond::default_instance_ = new SeatTakeRespond();
  Card::default_instance_->InitAsDefaultInstance();
  HandRequest::default_instance_->InitAsDefaultInstance();
  HandRespond::default_instance_->InitAsDefaultInstance();
  SeatTakeRequest::default_instance_->InitAsDefaultInstance();
  SeatTakeRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExampleProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExampleProto_2eproto {
  StaticDescriptorInitializer_ExampleProto_2eproto() {
    protobuf_AddDesc_ExampleProto_2eproto();
  }
} static_descriptor_initializer_ExampleProto_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Card_Suits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_Suits_descriptor_;
}
bool Card_Suits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Card_Suits Card::CLUBS;
const Card_Suits Card::DIAMONDS;
const Card_Suits Card::HEARTS;
const Card_Suits Card::SPADES;
const Card_Suits Card::Suits_MIN;
const Card_Suits Card::Suits_MAX;
const int Card::Suits_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Card_Types_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_Types_descriptor_;
}
bool Card_Types_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Card_Types Card::CARD2;
const Card_Types Card::CARD3;
const Card_Types Card::CARD4;
const Card_Types Card::CARD5;
const Card_Types Card::CARD6;
const Card_Types Card::CARD7;
const Card_Types Card::CARD8;
const Card_Types Card::CARD9;
const Card_Types Card::CARD10;
const Card_Types Card::JACK;
const Card_Types Card::QUEEN;
const Card_Types Card::KING;
const Card_Types Card::ACE;
const Card_Types Card::Types_MIN;
const Card_Types Card::Types_MAX;
const int Card::Types_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Card::kSuitFieldNumber;
const int Card::kTypeFieldNumber;
#endif  // !_MSC_VER

Card::Card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Card::InitAsDefaultInstance() {
}

Card::Card(const Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Card::SharedCtor() {
  _cached_size_ = 0;
  suit_ = 0;
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Card::~Card() {
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExampleProto_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New() const {
  return new Card;
}

void Card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suit_ = 0;
    type_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.sqiwy.poker.Card.Suits suit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::sqiwy::poker::Card_Suits_IsValid(value)) {
            set_suit(static_cast< ::com::sqiwy::poker::Card_Suits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .com.sqiwy.poker.Card.Types type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::sqiwy::poker::Card_Types_IsValid(value)) {
            set_type(static_cast< ::com::sqiwy::poker::Card_Types >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.sqiwy.poker.Card.Suits suit = 1;
  if (has_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->suit(), output);
  }

  // required .com.sqiwy.poker.Card.Types type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.sqiwy.poker.Card.Suits suit = 1;
  if (has_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->suit(), target);
  }

  // required .com.sqiwy.poker.Card.Types type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.sqiwy.poker.Card.Suits suit = 1;
    if (has_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->suit());
    }

    // required .com.sqiwy.poker.Card.Types type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suit()) {
      set_suit(from.suit());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Card::Swap(Card* other) {
  if (other != this) {
    std::swap(suit_, other->suit_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandRequest::kCardsFieldNumber;
const int HandRequest::kShowFieldNumber;
#endif  // !_MSC_VER

HandRequest::HandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandRequest::InitAsDefaultInstance() {
}

HandRequest::HandRequest(const HandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandRequest::SharedCtor() {
  _cached_size_ = 0;
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandRequest::~HandRequest() {
  SharedDtor();
}

void HandRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandRequest_descriptor_;
}

const HandRequest& HandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExampleProto_2eproto();
  return *default_instance_;
}

HandRequest* HandRequest::default_instance_ = NULL;

HandRequest* HandRequest::New() const {
  return new HandRequest;
}

void HandRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    show_ = false;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.sqiwy.poker.Card cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cards;
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }

      // required bool show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.sqiwy.poker.Card cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }

  // required bool show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.sqiwy.poker.Card cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(i), target);
  }

  // required bool show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.sqiwy.poker.Card cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandRequest::MergeFrom(const HandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandRequest::CopyFrom(const HandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  return true;
}

void HandRequest::Swap(HandRequest* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandRequest_descriptor_;
  metadata.reflection = HandRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HandRespond::HandRespond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandRespond::InitAsDefaultInstance() {
}

HandRespond::HandRespond(const HandRespond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandRespond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandRespond::~HandRespond() {
  SharedDtor();
}

void HandRespond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandRespond_descriptor_;
}

const HandRespond& HandRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExampleProto_2eproto();
  return *default_instance_;
}

HandRespond* HandRespond::default_instance_ = NULL;

HandRespond* HandRespond::New() const {
  return new HandRespond;
}

void HandRespond::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HandRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandRespond::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandRespond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandRespond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandRespond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandRespond::MergeFrom(const HandRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandRespond::CopyFrom(const HandRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandRespond::IsInitialized() const {

  return true;
}

void HandRespond::Swap(HandRespond* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandRespond_descriptor_;
  metadata.reflection = HandRespond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeatTakeRequest::kTakeFieldNumber;
#endif  // !_MSC_VER

SeatTakeRequest::SeatTakeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeatTakeRequest::InitAsDefaultInstance() {
}

SeatTakeRequest::SeatTakeRequest(const SeatTakeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeatTakeRequest::SharedCtor() {
  _cached_size_ = 0;
  take_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatTakeRequest::~SeatTakeRequest() {
  SharedDtor();
}

void SeatTakeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatTakeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatTakeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatTakeRequest_descriptor_;
}

const SeatTakeRequest& SeatTakeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExampleProto_2eproto();
  return *default_instance_;
}

SeatTakeRequest* SeatTakeRequest::default_instance_ = NULL;

SeatTakeRequest* SeatTakeRequest::New() const {
  return new SeatTakeRequest;
}

void SeatTakeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    take_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeatTakeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool take = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &take_)));
          set_has_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeatTakeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool take = 1;
  if (has_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeatTakeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool take = 1;
  if (has_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeatTakeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool take = 1;
    if (has_take()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatTakeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeatTakeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeatTakeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatTakeRequest::MergeFrom(const SeatTakeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_take()) {
      set_take(from.take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeatTakeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatTakeRequest::CopyFrom(const SeatTakeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatTakeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SeatTakeRequest::Swap(SeatTakeRequest* other) {
  if (other != this) {
    std::swap(take_, other->take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeatTakeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatTakeRequest_descriptor_;
  metadata.reflection = SeatTakeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeatTakeRespond::kTakenFieldNumber;
#endif  // !_MSC_VER

SeatTakeRespond::SeatTakeRespond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeatTakeRespond::InitAsDefaultInstance() {
}

SeatTakeRespond::SeatTakeRespond(const SeatTakeRespond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeatTakeRespond::SharedCtor() {
  _cached_size_ = 0;
  taken_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatTakeRespond::~SeatTakeRespond() {
  SharedDtor();
}

void SeatTakeRespond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatTakeRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatTakeRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatTakeRespond_descriptor_;
}

const SeatTakeRespond& SeatTakeRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExampleProto_2eproto();
  return *default_instance_;
}

SeatTakeRespond* SeatTakeRespond::default_instance_ = NULL;

SeatTakeRespond* SeatTakeRespond::New() const {
  return new SeatTakeRespond;
}

void SeatTakeRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taken_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeatTakeRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool taken = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &taken_)));
          set_has_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeatTakeRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool taken = 1;
  if (has_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->taken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeatTakeRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool taken = 1;
  if (has_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->taken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeatTakeRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool taken = 1;
    if (has_taken()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatTakeRespond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeatTakeRespond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeatTakeRespond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatTakeRespond::MergeFrom(const SeatTakeRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taken()) {
      set_taken(from.taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeatTakeRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatTakeRespond::CopyFrom(const SeatTakeRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatTakeRespond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SeatTakeRespond::Swap(SeatTakeRespond* other) {
  if (other != this) {
    std::swap(taken_, other->taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeatTakeRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatTakeRespond_descriptor_;
  metadata.reflection = SeatTakeRespond_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace poker
}  // namespace sqiwy
}  // namespace com

// @@protoc_insertion_point(global_scope)
